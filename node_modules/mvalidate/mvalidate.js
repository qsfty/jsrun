var strict = false;
var debug = false;
var print = require('mprint');
var mvalidate = {
    config : function(isStrict){
        strict = isStrict || false;
    },
    setDebug : function(isDebug){
        debug = isDebug;
    },
    validate : function(ruleName,val,arg){
        if(mvalidate[ruleName]){
            return mvalidate[ruleName](val,arg);
        }
        print.ps('非法规则'+ruleName);
        return false;
    },
    registMethod : function(name,method){
        mvalidate[name] = function(val,arg){
            if(val == null || val == ''){
                return !strict;
            }
            var result = method(val,arg);
            if(debug){
                ps("验证规则:" + name, result);
                ps("传递参数:" + val + (arg ? (","+arg) : ''), result);
                ps("验证结果:" + result, result);
                ps("*****************", result);
            }
            return result;
        }
    }
}

function ps(data,result){
    if(!result){
        print.error(data);
    }
    else{
        print.info(data);
    }
}

var methods = {
    email : function(val){
        return /^[0-9a-zA-Z]+@[0-9a-zA-Z]+\.[0-9a-zA-Z]+$/.test(val);
    },
    idcard : function(val){
        return /^[0-9]{14}[0-9X]$/.test(val) || /^[0-9]{17}[0-9X]$/.test(val);
    },
    mobile : function(val){
        return /^1[358]\d{9}$/.test(val);
    },
    url : function(val){
        return /^http[s]?:\/\/[0-9a-zA-Z]+\.[0-9a-zA-Z]+$/.test(val);
    },
    minlen : function(val,arg){
        val += '';
        return val.length >= arg;
    },
    maxlen : function(val,arg){
        val += '';
        return val.length >= arg;
    },
    len : function(val,arg){
        if(!Array.isArray(arg) && arg.length != 2){
            return false;
        }
        val += '';
        return methods.minlen(val,arg[0]) && methods.maxlen(val,arg[1]);
    },
    digit : function(val){
        return /^\d+$/.test(val);
    },
    range : function(val,arg){
        if(!Array.isArray(arg) && arg.length != 2){
            return false;
        }
        return parseInt(val) >= arg[0] && parseInt(val) <= arg[1];
    },
    ip : function(val){
        return /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/.test(val);
    },

};

for(var methodName in methods){
    mvalidate.registMethod(methodName,methods[methodName]);
}

module.exports = mvalidate;