var xmldoc = require('xmldoc')
var template = require('art-template')
require('./helper')(template)
var fs = require('fs');
var cache = require('memory-cache');
var ajax = require('mjax');
var print = require('mprint');
var mvalidate = require('mvalidate');
require('mstr');
var strs = "abcdefghijklmnopqrstuvwxyz0123456789abc";
var uuidLen = 8;
//给不同的connection设置不同的参数
!function(){
    var pool = {};
    var util = {
        config : function(config,connName){
            pool[connName] = {};
            pool[connName]['settings']  = config.settings || {};
            pool[connName]['mapper'] = config.mapper;
            pool[connName]['validate'] = config.validate || {};
            uuidLen = config.settings ? (config.settings.uuid_len || 8) : 8;
        },
        errs : {
            uniqueError : '唯一性错误',
            checkError : '删除时检查错误',
            insertError : '插入失败',
            updateError : '更新失败',
            deleteError : '删除失败'
        },
        getExecsql : function(db,model,method,param,resolve,reject,res){
            var settings = pool[db.connName]['settings'];
            var validate = pool[db.connName]['validate'];
            var mapperDir = pool[db.connName]['mapper'] ;
            var key = model + "." + method;
            //先读缓存
            var cacheSql = cache.get(key);
            if(settings.debug){
                print.info("读取模板" + key)
            }
            var presql = cacheSql;
            if(!cacheSql){
                var path = mapperDir + '/'+ model+'.xml';
                if(!fs.existsSync(path)){
                    var e = path + "不存在";
                    return util.reject(e,reject,res);
                };
                var presqlfile = fs.readFileSync(path,{encoding:"utf-8"});
                var document = new xmldoc.XmlDocument(presqlfile);
                var methodEle = document.childWithAttribute("id",method)

                if(!methodEle || !methodEle.val){
                    var e = model+"的"+method+"方法未定义";
                    return util.reject(e,reject,res);
                }
                var presql = document.childWithAttribute("id",method).val;
                //写入缓存
                cache.put(key,presql,1000 * 60 * 5);
            }
            if(settings.debug){
                print.info("DEBUG:模板SQL");
                print.info(presql);
            }
            if(settings.debug){
                print.info("传入参数:");
                print.info(param);
            }
            var sql = '';
            try{
                sql = template.compile(presql,{compress:true,escape:false})(param);
            }
            catch(err){
                var e = "SQL模板编译出错";
                print.error(e);
                print.error(presql);
                return util.reject(e,reject,res);
            }

            if(settings.debug){
                print.info("DEBUG:执行SQL");
                print.info(sql);
            }
            return sql;
        },
        reject : function(e,reject,res){
            print.error(e);
            if(res){
                if(typeof res == "function"){
                    return res(e);
                }
                return ajax.failure(res,e);
            }
            return reject(e);
        },
        resolve : function(data,resolve,res){
            if(res){
                if(typeof res == "function"){
                    return res(null,data);
                }
                return ajax.success(res,data);
            }
            return resolve(data);
        },
        exec : function(db,model,method,param,resolve,reject,res,ele,deal){

            /*前置操作
             1.如果是删除操作,则进行合法性判断
             2.如果是分页查询操作,则要把查询总量也要返回

             后置数据处理
             1.如果对于非列表查询,则将返回的数据进行处理
             2.如果一对多查询,那么在查询后要处理成一对多的形式

             */

            var beforeMethod = ele.attr.before;
            var args = arguments;
            if(beforeMethod){ //需要前置处理
                //先判断是否存在此方法
                var bean = (db.models)[model];
                if(bean.hasOwnProperty(beforeMethod)){
                    bean[beforeMethod](param).then(function(){
                        //继续执行
                        util.justDeal.apply(util,args);
                    },function(err){
                        print.ps("前置处理出现错误:");
                        print.ps(err);
                        return util.reject(err,reject,res);
                    });
                }
                else{
                    print.error("前置方法未定义");
                    return util.reject("前置方法未定义",reject,res);
                }
            }
            else{
                util.justDeal.apply(util,args);
            }
        },
        justDeal : function(db,model,method,param,resolve,reject,res,ele,deal){
            var settings = pool[db.connName]['settings'];
            var validate = pool[db.connName]['validate'];
            var mapperDir = pool[db.connName]['mapper'] ;
            var sql = this.getExecsql(db,model,method,param,resolve,reject,res);
            db.query(sql,function(err,data){
                //查询失败
                if(err){
                    if(settings.debug){
                        print.error("数据操作失败");
                        print.error(err);
                    }
                    return util.reject("服务器错误",reject,res);
                }

                //调用回调方法处理MYSQL返回结果
                if(settings.debug){
                    print.info("执行结果:")
                    print.info(data)
                }
                try{
                    data = deal(data,method,ele);
                }catch (e){
                    var msg = e.message;
                    switch (msg){
                        case util.errs.uniqueError :
                            if(validate[model] && validate[model].unique) {
                                msg = validate[model].unique;
                            }
                            else if(ele.attr.msg){
                                msg = ele.attr.msg;
                            }
                            else{
                                msg = "存在相同记录";
                            }
                            break;
                        case util.errs.checkError:
                            if(validate[model] && validate[model].check) {
                                msg = validate[model].check;
                            }
                            else if(ele.attr.msg){
                                msg = ele.attr.msg;
                            }
                            else{
                                msg = "该记录已被关联,无法删除";
                            }
                            break;
                        default :
                            break;
                    }
                    return util.reject(msg,reject,res);
                }
                if(settings.debug){
                    print.info("处理结果:")
                    print.info(data)
                }

                return util.resolve(data,resolve,res);
            });
        },
        select : function(){
            util.exec.apply(util,util.getArgs(arguments,function(data,method,ele){

                if(data.length == 1 && !method.contains("pageQuery,all,list,statistic") && !ele.attr.child && !ele.attr.more){
                    data = data[0];
                }
                else if(data.length == 0){
                    return null;
                }
                else if(ele.attr.child){
                    var result = [];
                    for(var i in data){
                        push(result,data[i],ele.attr.child,ele.attr.childName,ele.attr.childId,ele.attr.key);
                    }
                    data = result;
                    if(!method.contains("pageQuery,query, all,list") && data.length == 1){
                        data = result[0];
                    }
                }
                //结果集只有一个元素
                if(!Array.isArray(data) && util.countEle(data) == 1){
                    data = util.getFirstEle(data);
                }

                if(method.startsWith("isUnique","unique")){
                    if(data > 0){
                        throw new Error(util.errs.uniqueError);
                    }
                }
                else if(method.startsWith("isCheck","check")){
                    if(data > 0){
                        throw new Error(util.errs.checkError);
                    }
                }
                return data;
            }));
        },
        insert : function(db,model,method,param,resolve,reject,res,ele){

            // user : {  //key
            //     'name' : { // col
            //         minlen : {val:5,message:'用户名至少6位'},  //ruleItem = ruleValue
            //         require : {val:true,messagge:'用户名不能为空'} //ruleItem = ruleValue
            //     },
            // }
            //验证
            var settings = pool[db.connName]['settings'];
            var validate = pool[db.connName]['validate'];
            var mapperDir = pool[db.connName]['mapper'] ;
            var validateModel = validate[model];

            if(validateModel){
                //验证
                if(settings.debug){
                    mvalidate.setDebug(true);
                }
                var validateOk = true;
                var msg = '';
                for(var col in validateModel){
                    var colVal = param[col]; //取值
                    var rules = validateModel[col]; //取规则
                    if(typeof rules == "string"){
                        continue;
                    }
                    var validateErrorItem = '';
                    for(var ruleItem in rules){
                        var ruleVal = rules[ruleItem]['val']; //取规则值
                        validateErrorItem = ruleItem;
                        if(ruleItem == "required" && ruleVal && (colVal == null || colVal == '')){
                            validateOk = false;
                            break;
                        }
                        if(ruleItem != "required" && !mvalidate.validate(ruleItem,colVal,ruleVal)){
                            validateOk = false;
                            break;
                        }
                    }
                    if(!validateOk){
                        if(rules[validateErrorItem]['message']){
                            msg = rules[validateErrorItem]['message'];
                            print.error("字段验证失败:"+ msg);
                        }
                        else{
                            print.error('缺少字段' + validateErrorItem + '验证失败提示信息配置');
                            msg = '字段信息校验失败';
                        }
                        return util.reject(msg,reject,res);
                    }
                }
            }

            param.uuid = uuid();
            util.exec.apply(util,util.getArgs(arguments,function(data,method,ele){
                var affected = data.affectedRows;
                if(affected>0){
                    return param.uuid || data.insertId || -1;
                }
                else{
                    throw new Error(util.errs.insertError);
                }
            }));
        },
        update : function(db,model,method,param,resolve,reject,res,ele){
            var settings = pool[db.connName]['settings'];
            var validate = pool[db.connName]['validate'];
            var mapperDir = pool[db.connName]['mapper'] ;
            var validateModel = validate[model];

            if(validateModel){
                //验证
                if(settings.debug){
                    mvalidate.setDebug(true);
                }
                var validateOk = true;
                var msg = '';
                for(var col in validateModel){
                    var colVal = param[col]; //取值
                    var rules = validateModel[col]; //取规则
                    if(typeof rules == "string"){
                        continue;
                    }
                    var validateErrorItem = '';
                    for(var ruleItem in rules){
                        var ruleVal = rules[ruleItem]['val']; //取规则值
                        validateErrorItem = ruleItem;

                        if(ruleItem == "required" && ruleVal && (colVal == '')){
                            validateOk = false;
                            break;
                        }
                        if(ruleItem != "required" && !mvalidate.validate(ruleItem,colVal,ruleVal)){
                            validateOk = false;
                            break;
                        }
                    }
                    if(!validateOk){
                        if(rules[validateErrorItem]['message']){
                            msg = rules[validateErrorItem]['message'];
                            print.error("字段验证失败:"+ msg);
                        }
                        else{
                            print.error('缺少字段' + validateErrorItem + '验证失败提示信息配置');
                            msg = '字段信息校验失败';
                        }
                        return util.reject(msg,reject,res);
                    }
                }
            }


            util.exec.apply(util,util.getArgs(arguments,function(data,method,ele){
                var affected = data.affectedRows;
                if(affected>0){
                    return 1;
                }
                else{
                    throw new Error(util.errs.updateError);
                }
            }));
        },
        delete : function(){
            util.exec.apply(util,util.getArgs(arguments,function(data,method,ele){
                var affected = data.affectedRows;
                if(affected>0){
                    return 1;
                }
                else{
                    throw new Error(util.errs.deleteError);
                }
            }));
        },
        countEle : function(o){
            if(typeof o == "object"){
                var sum = 0;
                for(var i in o){
                    sum ++;
                }
                return sum;
            }
            return -1;
        },
        getFirstEle : function(o){
            if(typeof o == "object"){
                for(var i in o){
                    return o[i];
                }
            }
            return -1;
        },
        getArgs : function(args,other1,other2){
            var arr = [];
            for(var i in args){
                arr[i] = args[i];
            }
            if(typeof other1 != "undefined"){
                arr.push(other1);
            }
            if(typeof other2 != "undefined"){
                arr.push(other2);
            }
            return arr;
        },
        contains : function(s1,s2){
            if(util.contain(s2,",")){
                var ms = s2.split(",");
                for(var i in ms){
                    if(util.contain(s1,ms[i])){
                        return true;
                    }
                }
                return false;
            }
            return util.contain(s1,s2);
        },
        contain : function(s1,s2){
            return s1.toLowerCase().indexOf(s2.toLowerCase()) > -1;
        }
    }
    /**
     * [push description]
     * @param  {[type]} arr          数组
     * @param  {[type]} item         待插入的元素
     * @param  {[type]} childColumns 子列
     * @param  {[type]} childName    子元素名称
     * @param  {[type]} childId      子元素id
     * @param  {[type]} key          id
     * @return {[type]}              [description]
     */
    function push(arr,item,childColumns,childName,childId,key){
        childName = childName || 'child';
        childId = childId || 'id';
        key = key || 'id';
        //如果arr为空，则将元素直接压人数组中
        if(arr.length == 0){
            // if(item[childId]){
                
            // }
            //根据子列元素获取子列
            var mchild = [copyBean(item,childColumns,'include')];
            //将子列元素存入item对象内
            item[childName] = mchild;
            arr.push(copyBean(item, childColumns, 'exclude'));
            return;
        }
        //不为空情况
        var flag = false;//定义flag判断arr是否包含有相同的元素
        var kindex = 0;//定义kindex相同元素位置
        for(var i in arr){
            var o = arr[i];
            if(o[key] == item[key]){
                flag = true;
                kindex = i;
                break;
            }
        }
        //如果存在相同元素，则将该元素插入child中
        if(flag){
            var oc = arr[kindex];
            var mchild = oc[childName] || [copyBean(oc,childColumns,'include')];
            mchild.push(copyBean(item,childColumns));
            arr[kindex][childName] = mchild;
        }
        //否则压人数组中
        else{
            // if(item[childId]){
                
            // }
            var mchild = [copyBean(item,childColumns,'include')];
            item[childName] = mchild;
            arr.push(copyBean(item, childColumns, 'exclude'));
        }
    }

    function copyBean(source,keys,includeOrExclude){
        includeOrExclude = includeOrExclude || 'include';
        var keys = keys || '';
        var es = keys.split(',');
        var target = {};
        for(var key in source){
            if(keys == ''){
                target[key] = source[key];
                continue;
            }
            if(includeOrExclude == 'include'){ //只包含keys字段
                if(es.indexOf(key) >= 0){
                    target[key] = source[key];
                }
            }
            else{ //剔除keys字段
                if(es.indexOf(key) < 0){
                    target[key] = source[key];
                }
            }
        }
        return target;
    }


    function uuid(){
        var rst = "";
        var len = strs.length - 2;
        for(var i = 0;i<uuidLen;i++){
            rst += strs.charAt(Math.floor(Math.random() * len));
        }
        return rst;
    }

    module.exports = util;

}();
